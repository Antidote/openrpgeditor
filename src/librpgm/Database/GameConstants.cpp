#include "Database/GameConstants.hpp"

#include "Database/Database.hpp"

#include <fstream>
#include <format>

GameConstants GameConstants::load(std::string_view path) {
  if (std::ifstream file(path.data()); file.is_open()) {
    try {
      nlohmann::json data = nlohmann::json::parse(file);
      GameConstants ret;
      data.get_to(ret);
      return ret;
    } catch (...) {}
  }

  return {};
}

bool GameConstants::serialize(const std::string_view path) {
  std::ofstream file(path.data());
  try {
    if (file.is_open()) {
      const nlohmann::json data = *this;
      file << data.dump(4);
      return true;
    }
  } catch (...) {}
  return false;
}

bool GameConstants::generateConstantsJS(std::string_view path) {
  std::ofstream file(path.data());
  if (!file.is_open()) {
    return false;
  }

  file << "// Generated by OpenRPGEditor\n";
  file << "// DO NOT MODIFY!\n";
  file << "\n// -----------------VARIABLES-----------------\n";
  for (const auto& [id, alias] : variables) {
    file << std::format("\n// @name VAR_{}\n// @description Exported Variable \"{}\" ({})\n// @readonly\n", alias,
                        Database::Instance->system.variables[id], id);
    file << std::format("const VAR_{} = {};\n", alias, id);
  }
  file << "\n// -----------------SWITCHES------------------\n";
  for (const auto& [id, alias] : switches) {
    file << std::format("\n// @name SW_{}\n// @description Exported Switch \"{}\" ({})\n// @readonly\n", alias,
                        Database::Instance->system.switches[id], id);
    file << std::format("const SW_{} = {};\n", alias, id);
  }
  file << "\n// ------------------ACTORS-------------------\n";
  for (const auto& [id, alias] : actors) {
    auto act = Database::Instance->actors.actor(id);
    file << std::format("\n// @name ACT_{}\n// @description Exported Actor \"{}\" ({})\n// @readonly\n", alias,
                        act->name, id);
    file << std::format("const ACT_{} = {};\n", alias, id);
  }

  file << "\n// ------------------CLASSES------------------\n";
  for (const auto& [id, alias] : classes) {
    auto cls = Database::Instance->classes.classType(id);
    file << std::format("\n// @name CLS_{}\n// @description Exported Class \"{}\" ({})\n// @readonly\n", alias,
                        cls->name, id);
    file << std::format("const CLS_{} = {};\n", alias, id);
  }

  file << "\n// ------------------SKILLS-------------------\n";
  for (const auto& [id, alias] : skills) {
    auto skill = Database::Instance->skills.skill(id);
    file << std::format("\n// @name SKL_{}\n// @description Exported Skill \"{}\" ({})\n// @readonly\n", alias,
                        skill->name, id);
    file << std::format("const SKL_{} = {};\n", alias, id);
  }

  file << "\n// ------------------ITEMS--------------------\n";
  for (const auto& [id, alias] : items) {
    auto itm = Database::Instance->items.item(id);
    file << std::format("\n// @name ITM_{}\n// @description Exported Item \"{}\" ({})\n// @readonly\n", alias,
                        itm->name, id);
    file << std::format("const ITM_{} = {};\n", alias, id);
  }

  file << "\n// ------------------WEAPONS------------------\n";
  for (const auto& [id, alias] : weapons) {
    auto wpn = Database::Instance->weapons.weapon(id);
    file << std::format("\n// @name WPN_{}\n// @description Exported Weapon \"{}\" ({})\n// @readonly\n", alias,
                        wpn->name, id);
    file << std::format("const WPN_{} = {};\n", alias, id);
  }
  file << "\n// ------------------ARMORS-------------------\n";
  for (const auto& [id, alias] : armors) {
    auto arm = Database::Instance->armors.armor(id);
    file << std::format("\n// @name ARM_{}\n// @description Exported Armor \"{}\" ({})\n// @readonly\n", alias,
                        arm->name, id);
    file << std::format("const ARM_{} = {};\n", alias, id);
  }
  file << "\n// ------------------ENEMIES------------------\n";
  for (const auto& [id, alias] : enemies) {
    auto enm = Database::Instance->enemies.enemy(id);
    file << std::format("\n// @name ENM_{}\n// @description Exported Enemy \"{}\" ({})\n// @readonly\n", alias,
                        enm->name, id);
    file << std::format("const ENM_{} = {};\n", alias, id);
  }
  file << "\n// ------------------TROOPS-------------------\n";
  for (const auto& [id, alias] : troops) {
    auto trp = Database::Instance->troops.troop(id);
    file << std::format("\n// @name TRP_{}\n// @description Exported Troop \"{}\" ({})\n// @readonly\n", alias,
                        trp->name, id);
    file << std::format("const TRP_{} = {};\n", alias, id);
  }
  file << "\n// -----------------TILESETS------------------\n";
  for (const auto& [id, alias] : tilesets) {
    auto tls = Database::Instance->tilesets.tileset(id);
    file << std::format("\n// @name TLS_{}\n// @description Exported Tileset \"{}\" ({})\n// @readonly\n", alias,
                        tls->name, id);
    file << std::format("const TLS_{} = {};\n", alias, id);
  }

  file << "\n// ---------------COMMON EVENTS---------------\n";
  for (const auto& [id, alias] : commonEvents) {
    auto ce = Database::Instance->commonEvents.event(id);
    file << std::format("\n// @name CE_{}\n// @description Exported Common Event \"{}\" ({})\n// @readonly\n", alias,
                        ce->name, id);
    file << std::format("const CE_{} = {};\n", alias, id);
  }

  file << "\n// -------------------MAPS--------------------\n";
  for (const auto& [id, alias] : maps) {
    auto map = Database::Instance->mapInfos.map(id);
    file << std::format("\n// @name MAP_{}\n// @description Exported Map \"{}\" ({})\n// @readonly\n", alias, map->name,
                        id);
    file << std::format("const MAP_{} = {};\n", alias, id);
  }
  return true;
}

bool GameConstants::isValidName(Type type, int id, const std::string& constant) {
  if (constant.empty()) {
    return false;
  }
  switch (type) {
  case Type::Variable:
    return std::find_if(variables.begin(), variables.end(), [&constant, id](const auto& v) {
             return v.first != id && v.second == constant;
           }) == variables.end();
  case Type::Switch:
    return std::find_if(switches.begin(), switches.end(), [&constant, id](const auto& v) {
             return v.first != id && v.second == constant;
           }) == switches.end();
  case Type::Actor:
    return std::find_if(actors.begin(), actors.end(), [&constant, id](const auto& v) {
             return v.first != id && v.second == constant;
           }) == actors.end();
  case Type::Class:
    return std::find_if(classes.begin(), classes.end(), [&constant, id](const auto& v) {
             return v.first != id && v.second == constant;
           }) == classes.end();
  case Type::Skill:
    return std::find_if(skills.begin(), skills.end(), [&constant, id](const auto& v) {
             return v.first != id && v.second == constant;
           }) == skills.end();
  case Type::Item:
    return std::find_if(items.begin(), items.end(), [&constant, id](const auto& v) {
             return v.first != id && v.second == constant;
           }) == items.end();
  case Type::Weapon:
    return std::find_if(weapons.begin(), weapons.end(), [&constant, id](const auto& v) {
             return v.first != id && v.second == constant;
           }) == weapons.end();
  case Type::Armor:
    return std::find_if(armors.begin(), armors.end(), [&constant, id](const auto& v) {
             return v.first != id && v.second == constant;
           }) == armors.end();
  case Type::Enemy:
    return std::find_if(enemies.begin(), enemies.end(), [&constant, id](const auto& v) {
             return v.first != id && v.second == constant;
           }) == enemies.end();
  case Type::Troop:
    return std::find_if(troops.begin(), troops.end(), [&constant, id](const auto& v) {
             return v.first != id && v.second == constant;
           }) == troops.end();
  case Type::State:
    return std::find_if(states.begin(), states.end(), [&constant, id](const auto& v) {
             return v.first != id && v.second == constant;
           }) == states.end();
  case Type::Animation:
    return std::find_if(animations.begin(), animations.end(), [&constant, id](const auto& v) {
             return v.first != id && v.second == constant;
           }) == animations.end();
  case Type::Tileset:
    return std::find_if(tilesets.begin(), tilesets.end(), [&constant, id](const auto& v) {
             return v.first != id && v.second == constant;
           }) == tilesets.end();
  case Type::CommonEvent:
    return std::find_if(commonEvents.begin(), commonEvents.end(), [&constant, id](const auto& v) {
             return v.first != id && v.second == constant;
           }) == commonEvents.end();
  case Type::Map:
    return std::find_if(maps.begin(), maps.end(),
                        [&constant, id](const auto& v) { return v.first != id && v.second == constant; }) == maps.end();
  }

  return false;
}
