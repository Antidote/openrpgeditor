#pragma once
#include "Database/Globals.hpp"
#include "Database/Trait.hpp"

#include <nlohmann/json.hpp>
#include <string>
#include <vector>

class Messages final : public IModifiable {
  friend void to_json(nlohmann::ordered_json& to, const Messages& messages);
  friend void from_json(const nlohmann::ordered_json& from, Messages& messages);

public:
  Messages() = default;
  Messages(const Messages& other);
  Messages& operator=(const Messages& other);
  Messages(Messages&& other) noexcept;
  Messages& operator=(Messages&& other) noexcept;

  const std::string& actionFailure();
  void setActionFailure(const std::string&);
  const std::string& actorDamage();
  void setActorDamage(const std::string&);
  const std::string& actorDrain();
  void setActorDrain(const std::string&);
  const std::string& actorGain();
  void setActorGain(const std::string&);
  const std::string& actorLoss();
  void setActorLoss(const std::string&);
  const std::string& actorNoDamage();
  void setActorNoDamage(const std::string&);
  const std::string& actorNoHit();
  void setActorNoHit(const std::string&);
  const std::string& actorRecovery();
  void setActorRecovery(const std::string&);
  const std::string& alwaysDash();
  void setAlwaysDash(const std::string&);
  const std::string& bgmVolume();
  void setBgmVolume(const std::string&);
  const std::string& bgsVolume();
  void setBgsVolume(const std::string&);
  const std::string& buffAdd();
  void setBuffAdd(const std::string&);
  const std::string& buffRemove();
  void setBuffRemove(const std::string&);
  const std::string& commandRemember();
  void setCommandRemember(const std::string&);
  const std::string& counterAttack();
  void setCounterAttack(const std::string&);
  const std::string& criticalToActor();
  void setCriticalToActor(const std::string&);
  const std::string& criticalToEnemy();
  void setCriticalToEnemy(const std::string&);
  const std::string& debuffAdd();
  void setDebuffAdd(const std::string&);
  const std::string& defeat();
  void setDefeat(const std::string&);
  const std::string& emerge();
  void setEmerge(const std::string&);
  const std::string& enemyDamage();
  void setEnemyDamage(const std::string&);
  const std::string& enemyDrain();
  void setEnemyDrain(const std::string&);
  const std::string& enemyGain();
  void setEnemyGain(const std::string&);
  const std::string& enemyLoss();
  void setEnemyLoss(const std::string&);
  const std::string& enemyNoDamage();
  void setEnemyNoDamage(const std::string&);
  const std::string& enemyNoHit();
  void setEnemyNoHit(const std::string&);
  const std::string& enemyRecovery();
  void setEnemyRecovery(const std::string&);
  const std::string& escapeFailure();
  void setEscapeFailure(const std::string&);
  const std::string& escapeStart();
  void setEscapeStart(const std::string&);
  const std::string& evasion();
  void setEvasion(const std::string&);
  const std::string& expNext();
  void setExpNext(const std::string&);
  const std::string& expTotal();
  void setExpTotal(const std::string&);
  const std::string& file();
  void setFile(const std::string&);
  const std::string& levelUp();
  void setLevelUp(const std::string&);
  const std::string& loadMessage();
  void setLoadMessage(const std::string&);
  const std::string& magicEvasion();
  void setMagicEvasion(const std::string&);
  const std::string& magicReflection();
  void setMagicReflection(const std::string&);
  const std::string& meVolume();
  void setMeVolume(const std::string&);
  const std::string& obtainExp();
  void setObtainExp(const std::string&);
  const std::string& obtainGold();
  void setObtainGold(const std::string&);
  const std::string& obtainItem();
  void setObtainItem(const std::string&);
  const std::string& obtainSkill();
  void setObtainSkill(const std::string&);
  const std::string& partyName();
  void setPartyName(const std::string&);
  const std::string& possession();
  void setPossession(const std::string&);
  const std::string& preemptive();
  void setPreemptive(const std::string&);
  const std::string& saveMessage();
  void setSaveMessage(const std::string&);
  const std::string& seVolume();
  void setSeVolume(const std::string&);
  const std::string& substitute();
  void setSubstitute(const std::string&);
  const std::string& surprise();
  void setSurprise(const std::string&);
  const std::string& useItem();
  void setUseItem(const std::string&);
  const std::string& victory();
  void setVictory(const std::string&);

  void restoreOriginal() override;
  void acceptChanges() override;
  nlohmann::ordered_json serializeOldValues() const override;

  rpgmutils::signal<void(Messages*, const std::string&)>& actionFailureModified();
  rpgmutils::signal<void(Messages*, const std::string&)>& actorDamageModified();
  rpgmutils::signal<void(Messages*, const std::string&)>& actorDrainModified();
  rpgmutils::signal<void(Messages*, const std::string&)>& actorGainModified();
  rpgmutils::signal<void(Messages*, const std::string&)>& actorLossModified();
  rpgmutils::signal<void(Messages*, const std::string&)>& actorNoDamageModified();
  rpgmutils::signal<void(Messages*, const std::string&)>& actorNoHitModified();
  rpgmutils::signal<void(Messages*, const std::string&)>& actorRecoveryModified();
  rpgmutils::signal<void(Messages*, const std::string&)>& alwaysDashModified();
  rpgmutils::signal<void(Messages*, const std::string&)>& bgmVolumeModified();
  rpgmutils::signal<void(Messages*, const std::string&)>& bgsVolumeModified();
  rpgmutils::signal<void(Messages*, const std::string&)>& buffAddModified();
  rpgmutils::signal<void(Messages*, const std::string&)>& buffRemoveModified();
  rpgmutils::signal<void(Messages*, const std::string&)>& commandRememberModified();
  rpgmutils::signal<void(Messages*, const std::string&)>& counterAttackModified();
  rpgmutils::signal<void(Messages*, const std::string&)>& criticalToActorModified();
  rpgmutils::signal<void(Messages*, const std::string&)>& criticalToEnemyModified();
  rpgmutils::signal<void(Messages*, const std::string&)>& debuffAddModified();
  rpgmutils::signal<void(Messages*, const std::string&)>& defeatModified();
  rpgmutils::signal<void(Messages*, const std::string&)>& emergeModified();
  rpgmutils::signal<void(Messages*, const std::string&)>& enemyDamageModified();
  rpgmutils::signal<void(Messages*, const std::string&)>& enemyDrainModified();
  rpgmutils::signal<void(Messages*, const std::string&)>& enemyGainModified();
  rpgmutils::signal<void(Messages*, const std::string&)>& enemyLossModified();
  rpgmutils::signal<void(Messages*, const std::string&)>& enemyNoDamageModified();
  rpgmutils::signal<void(Messages*, const std::string&)>& enemyNoHitModified();
  rpgmutils::signal<void(Messages*, const std::string&)>& enemyRecoveryModified();
  rpgmutils::signal<void(Messages*, const std::string&)>& escapeFailureModified();
  rpgmutils::signal<void(Messages*, const std::string&)>& escapeStartModified();
  rpgmutils::signal<void(Messages*, const std::string&)>& evasionModified();
  rpgmutils::signal<void(Messages*, const std::string&)>& expNextModified();
  rpgmutils::signal<void(Messages*, const std::string&)>& expTotalModified();
  rpgmutils::signal<void(Messages*, const std::string&)>& fileModified();
  rpgmutils::signal<void(Messages*, const std::string&)>& levelUpModified();
  rpgmutils::signal<void(Messages*, const std::string&)>& loadMessageModified();
  rpgmutils::signal<void(Messages*, const std::string&)>& magicEvasionModified();
  rpgmutils::signal<void(Messages*, const std::string&)>& magicReflectionModified();
  rpgmutils::signal<void(Messages*, const std::string&)>& meVolumeModified();
  rpgmutils::signal<void(Messages*, const std::string&)>& obtainExpModified();
  rpgmutils::signal<void(Messages*, const std::string&)>& obtainGoldModified();
  rpgmutils::signal<void(Messages*, const std::string&)>& obtainItemModified();
  rpgmutils::signal<void(Messages*, const std::string&)>& obtainSkillModified();
  rpgmutils::signal<void(Messages*, const std::string&)>& partyNameModified();
  rpgmutils::signal<void(Messages*, const std::string&)>& possessionModified();
  rpgmutils::signal<void(Messages*, const std::string&)>& preemptiveModified();
  rpgmutils::signal<void(Messages*, const std::string&)>& saveMessageModified();
  rpgmutils::signal<void(Messages*, const std::string&)>& seVolumeModified();
  rpgmutils::signal<void(Messages*, const std::string&)>& substituteModified();
  rpgmutils::signal<void(Messages*, const std::string&)>& surpriseModified();
  rpgmutils::signal<void(Messages*, const std::string&)>& useItemModified();
  rpgmutils::signal<void(Messages*, const std::string&)>& victoryModified();

  bool operator==(const Messages& other) const {
    return m_actionFailure == other.m_actionFailure && m_actorDamage == other.m_actorDamage && m_actorDrain == other.m_actorDrain && m_actorGain == other.m_actorGain &&
           m_actorLoss == other.m_actorLoss && m_actorNoDamage == other.m_actorNoDamage && m_actorNoHit == other.m_actorNoHit && m_actorRecovery == other.m_actorRecovery &&
           m_alwaysDash == other.m_alwaysDash && m_bgmVolume == other.m_bgmVolume && m_bgsVolume == other.m_bgsVolume && m_buffAdd == other.m_buffAdd && m_buffRemove == other.m_buffRemove &&
           m_commandRemember == other.m_commandRemember && m_counterAttack == other.m_counterAttack && m_criticalToActor == other.m_criticalToActor && m_criticalToEnemy == other.m_criticalToEnemy &&
           m_debuffAdd == other.m_debuffAdd && m_defeat == other.m_defeat && m_emerge == other.m_emerge && m_enemyDamage == other.m_enemyDamage && m_enemyDrain == other.m_enemyDrain &&
           m_enemyGain == other.m_enemyGain && m_enemyLoss == other.m_enemyLoss && m_enemyNoDamage == other.m_enemyNoDamage && m_enemyNoHit == other.m_enemyNoHit &&
           m_enemyRecovery == other.m_enemyRecovery && m_escapeFailure == other.m_escapeFailure && m_escapeStart == other.m_escapeStart && m_evasion == other.m_evasion &&
           m_expNext == other.m_expNext && m_expTotal == other.m_expTotal && m_file == other.m_file && m_levelUp == other.m_levelUp && m_loadMessage == other.m_loadMessage &&
           m_magicEvasion == other.m_magicEvasion && m_magicReflection == other.m_magicReflection && m_meVolume == other.m_meVolume && m_obtainExp == other.m_obtainExp &&
           m_obtainGold == other.m_obtainGold && m_obtainItem == other.m_obtainItem && m_obtainSkill == other.m_obtainSkill && m_partyName == other.m_partyName && m_possession == other.m_possession &&
           m_preemptive == other.m_preemptive && m_saveMessage == other.m_saveMessage && m_seVolume == other.m_seVolume && m_substitute == other.m_substitute && m_surprise == other.m_surprise &&
           m_useItem == other.m_useItem && m_victory == other.m_victory;
  }

private:
  std::string m_actionFailure;
  std::string m_actorDamage;
  std::string m_actorDrain;
  std::string m_actorGain;
  std::string m_actorLoss;
  std::string m_actorNoDamage;
  std::string m_actorNoHit;
  std::string m_actorRecovery;
  std::string m_alwaysDash;
  std::string m_bgmVolume;
  std::string m_bgsVolume;
  std::string m_buffAdd;
  std::string m_buffRemove;
  std::string m_commandRemember;
  std::string m_counterAttack;
  std::string m_criticalToActor;
  std::string m_criticalToEnemy;
  std::string m_debuffAdd;
  std::string m_defeat;
  std::string m_emerge;
  std::string m_enemyDamage;
  std::string m_enemyDrain;
  std::string m_enemyGain;
  std::string m_enemyLoss;
  std::string m_enemyNoDamage;
  std::string m_enemyNoHit;
  std::string m_enemyRecovery;
  std::string m_escapeFailure;
  std::string m_escapeStart;
  std::string m_evasion;
  std::string m_expNext;
  std::string m_expTotal;
  std::string m_file;
  std::string m_levelUp;
  std::string m_loadMessage;
  std::string m_magicEvasion;
  std::string m_magicReflection;
  std::string m_meVolume;
  std::string m_obtainExp;
  std::string m_obtainGold;
  std::string m_obtainItem;
  std::string m_obtainSkill;
  std::string m_partyName;
  std::string m_possession;
  std::string m_preemptive;
  std::string m_saveMessage;
  std::string m_seVolume;
  std::string m_substitute;
  std::string m_surprise;
  std::string m_useItem;
  std::string m_victory;

  std::optional<std::string> m_oldactionFailure;
  std::optional<std::string> m_oldactorDamage;
  std::optional<std::string> m_oldactorDrain;
  std::optional<std::string> m_oldactorGain;
  std::optional<std::string> m_oldactorLoss;
  std::optional<std::string> m_oldactorNoDamage;
  std::optional<std::string> m_oldactorNoHit;
  std::optional<std::string> m_oldactorRecovery;
  std::optional<std::string> m_oldalwaysDash;
  std::optional<std::string> m_oldbgmVolume;
  std::optional<std::string> m_oldbgsVolume;
  std::optional<std::string> m_oldbuffAdd;
  std::optional<std::string> m_oldbuffRemove;
  std::optional<std::string> m_oldcommandRemember;
  std::optional<std::string> m_oldcounterAttack;
  std::optional<std::string> m_oldcriticalToActor;
  std::optional<std::string> m_oldcriticalToEnemy;
  std::optional<std::string> m_olddebuffAdd;
  std::optional<std::string> m_olddefeat;
  std::optional<std::string> m_oldemerge;
  std::optional<std::string> m_oldenemyDamage;
  std::optional<std::string> m_oldenemyDrain;
  std::optional<std::string> m_oldenemyGain;
  std::optional<std::string> m_oldenemyLoss;
  std::optional<std::string> m_oldenemyNoDamage;
  std::optional<std::string> m_oldenemyNoHit;
  std::optional<std::string> m_oldenemyRecovery;
  std::optional<std::string> m_oldescapeFailure;
  std::optional<std::string> m_oldescapeStart;
  std::optional<std::string> m_oldevasion;
  std::optional<std::string> m_oldexpNext;
  std::optional<std::string> m_oldexpTotal;
  std::optional<std::string> m_oldfile;
  std::optional<std::string> m_oldlevelUp;
  std::optional<std::string> m_oldloadMessage;
  std::optional<std::string> m_oldmagicEvasion;
  std::optional<std::string> m_oldmagicReflection;
  std::optional<std::string> m_oldmeVolume;
  std::optional<std::string> m_oldobtainExp;
  std::optional<std::string> m_oldobtainGold;
  std::optional<std::string> m_oldobtainItem;
  std::optional<std::string> m_oldobtainSkill;
  std::optional<std::string> m_oldpartyName;
  std::optional<std::string> m_oldpossession;
  std::optional<std::string> m_oldpreemptive;
  std::optional<std::string> m_oldsaveMessage;
  std::optional<std::string> m_oldseVolume;
  std::optional<std::string> m_oldsubstitute;
  std::optional<std::string> m_oldsurprise;
  std::optional<std::string> m_olduseItem;
  std::optional<std::string> m_oldvictory;

  std::optional<rpgmutils::signal<void(Messages*, const std::string&)>> m_actionFailureModified;
  std::optional<rpgmutils::signal<void(Messages*, const std::string&)>> m_actorDamageModified;
  std::optional<rpgmutils::signal<void(Messages*, const std::string&)>> m_actorDrainModified;
  std::optional<rpgmutils::signal<void(Messages*, const std::string&)>> m_actorGainModified;
  std::optional<rpgmutils::signal<void(Messages*, const std::string&)>> m_actorLossModified;
  std::optional<rpgmutils::signal<void(Messages*, const std::string&)>> m_actorNoDamageModified;
  std::optional<rpgmutils::signal<void(Messages*, const std::string&)>> m_actorNoHitModified;
  std::optional<rpgmutils::signal<void(Messages*, const std::string&)>> m_actorRecoveryModified;
  std::optional<rpgmutils::signal<void(Messages*, const std::string&)>> m_alwaysDashModified;
  std::optional<rpgmutils::signal<void(Messages*, const std::string&)>> m_bgmVolumeModified;
  std::optional<rpgmutils::signal<void(Messages*, const std::string&)>> m_bgsVolumeModified;
  std::optional<rpgmutils::signal<void(Messages*, const std::string&)>> m_buffAddModified;
  std::optional<rpgmutils::signal<void(Messages*, const std::string&)>> m_buffRemoveModified;
  std::optional<rpgmutils::signal<void(Messages*, const std::string&)>> m_commandRememberModified;
  std::optional<rpgmutils::signal<void(Messages*, const std::string&)>> m_counterAttackModified;
  std::optional<rpgmutils::signal<void(Messages*, const std::string&)>> m_criticalToActorModified;
  std::optional<rpgmutils::signal<void(Messages*, const std::string&)>> m_criticalToEnemyModified;
  std::optional<rpgmutils::signal<void(Messages*, const std::string&)>> m_debuffAddModified;
  std::optional<rpgmutils::signal<void(Messages*, const std::string&)>> m_defeatModified;
  std::optional<rpgmutils::signal<void(Messages*, const std::string&)>> m_emergeModified;
  std::optional<rpgmutils::signal<void(Messages*, const std::string&)>> m_enemyDamageModified;
  std::optional<rpgmutils::signal<void(Messages*, const std::string&)>> m_enemyDrainModified;
  std::optional<rpgmutils::signal<void(Messages*, const std::string&)>> m_enemyGainModified;
  std::optional<rpgmutils::signal<void(Messages*, const std::string&)>> m_enemyLossModified;
  std::optional<rpgmutils::signal<void(Messages*, const std::string&)>> m_enemyNoDamageModified;
  std::optional<rpgmutils::signal<void(Messages*, const std::string&)>> m_enemyNoHitModified;
  std::optional<rpgmutils::signal<void(Messages*, const std::string&)>> m_enemyRecoveryModified;
  std::optional<rpgmutils::signal<void(Messages*, const std::string&)>> m_escapeFailureModified;
  std::optional<rpgmutils::signal<void(Messages*, const std::string&)>> m_escapeStartModified;
  std::optional<rpgmutils::signal<void(Messages*, const std::string&)>> m_evasionModified;
  std::optional<rpgmutils::signal<void(Messages*, const std::string&)>> m_expNextModified;
  std::optional<rpgmutils::signal<void(Messages*, const std::string&)>> m_expTotalModified;
  std::optional<rpgmutils::signal<void(Messages*, const std::string&)>> m_fileModified;
  std::optional<rpgmutils::signal<void(Messages*, const std::string&)>> m_levelUpModified;
  std::optional<rpgmutils::signal<void(Messages*, const std::string&)>> m_loadMessageModified;
  std::optional<rpgmutils::signal<void(Messages*, const std::string&)>> m_magicEvasionModified;
  std::optional<rpgmutils::signal<void(Messages*, const std::string&)>> m_magicReflectionModified;
  std::optional<rpgmutils::signal<void(Messages*, const std::string&)>> m_meVolumeModified;
  std::optional<rpgmutils::signal<void(Messages*, const std::string&)>> m_obtainExpModified;
  std::optional<rpgmutils::signal<void(Messages*, const std::string&)>> m_obtainGoldModified;
  std::optional<rpgmutils::signal<void(Messages*, const std::string&)>> m_obtainItemModified;
  std::optional<rpgmutils::signal<void(Messages*, const std::string&)>> m_obtainSkillModified;
  std::optional<rpgmutils::signal<void(Messages*, const std::string&)>> m_partyNameModified;
  std::optional<rpgmutils::signal<void(Messages*, const std::string&)>> m_possessionModified;
  std::optional<rpgmutils::signal<void(Messages*, const std::string&)>> m_preemptiveModified;
  std::optional<rpgmutils::signal<void(Messages*, const std::string&)>> m_saveMessageModified;
  std::optional<rpgmutils::signal<void(Messages*, const std::string&)>> m_seVolumeModified;
  std::optional<rpgmutils::signal<void(Messages*, const std::string&)>> m_substituteModified;
  std::optional<rpgmutils::signal<void(Messages*, const std::string&)>> m_surpriseModified;
  std::optional<rpgmutils::signal<void(Messages*, const std::string&)>> m_useItemModified;
  std::optional<rpgmutils::signal<void(Messages*, const std::string&)>> m_victoryModified;
};

void to_json(nlohmann::ordered_json& to, const Messages& messages);
void from_json(const nlohmann::ordered_json& from, Messages& messages);