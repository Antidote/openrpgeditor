#if 0
      if (m_lowerLayer.empty()) {
        m_lowerLayer.clear();
        m_upperLayer.clear();
        for (int y = 0; y < m_map->height; y++) {
          for (int x = 0; x < m_map->width; x++) {
            for (int i = 0; i < 2; ++i) {
              static const int desiredLayers[2]{0, 2};
              int tileId = m_mapRenderer.tileId(x, y, i);
              if (m_mapRenderer.isHigherTile(tileId)) {
                m_mapRenderer.getTileRect(m_upperLayer, m_mapRenderer.tileId(x, y, desiredLayers[i]), x * 48, y * 48);
              } else {
                m_mapRenderer.getTileRect(m_lowerLayer, m_mapRenderer.tileId(x, y, desiredLayers[i]), x * 48, y * 48);
              }
            }
          }
        }
      }

      for (auto tile : m_lowerLayer) {
        const auto& tex = m_mapRenderer.m_tilesetTextures[tile.setNum];
        const float x0 = tile.x;
        const float x1 = tile.x + tile.tileWidth;
        const float y0 = tile.y;
        const float y1 = tile.y + tile.tileHeight;
        const float u0 = tile.u / tex.width();
        const float u1 = (tile.u + tile.tileWidth) / tex.width();
        const float v0 = tile.v / tex.height();
        const float v1 = (tile.v + tile.tileHeight) / tex.height();
        win->DrawList->AddImage(tex.get(), win->ContentRegionRect.Min + (ImVec2{x0, y0} * m_mapScale),
                                win->ContentRegionRect.Min + (ImVec2{x1, y1} * m_mapScale), ImVec2{u0, v0},
                                ImVec2{u1, v1});
      }
      for (auto tile : m_upperLayer) {
        const auto& tex = m_mapRenderer.m_tilesetTextures[tile.setNum];
        const float x0 = tile.x;
        const float x1 = tile.x + tile.tileWidth;
        const float y0 = tile.y;
        const float y1 = tile.y + tile.tileHeight;
        const float u0 = tile.u / tex.width();
        const float u1 = (tile.u + tile.tileWidth) / tex.width();
        const float v0 = tile.v / tex.height();
        const float v1 = (tile.v + tile.tileHeight) / tex.height();
        win->DrawList->AddImage(tex.get(), win->ContentRegionRect.Min + (ImVec2{x0, y0} * m_mapScale),
                                win->ContentRegionRect.Min + (ImVec2{x1, y1} * m_mapScale), ImVec2{u0, v0},
                                ImVec2{u1, v1});
      }
#endif



#if 0
  if (m_map) {
    const Tileset* tileset = m_parent->tileset(m_map->tilesetId);
    if (tileset && !tileset->name.empty() && !tileset->flags.empty()) {
      if (ImGui::Begin("Tile Debugger")) {
        ImGui::BeginGroup();
        {
          for (int z = 0; z < 6; ++z) {
            int tileCellIndex = (z * m_map->height + m_tileCellY) * m_map->width + m_tileCellX;
            if (tileCellIndex > m_map->data.size()) {
              continue;
            }
            ImGui::Text("Tile %i, layer %i, cell {%i, %i}, absolute {%i, %i}", tileCellIndex, z, m_tileCellX,
                        m_tileCellY, m_tileCellX * 48, m_tileCellY * 48);
            int tileId = m_map->data[tileCellIndex];
            if (tileId >= tileset->flags.size()) {
              continue;
            }
            int flags = tileset->flags[tileId];
            ImGui::Text(
                "Tile ID %i, Flags 0x%04X, IsAutoTile %i, IsA1Tile %i, IsA2Tile %i, IsA3Tile %i, IsA4Tile %i, IsA5Tile "
                "%i",
                tileId, flags, MapRenderer::isAutoTile(tileId), MapRenderer::isTileA1(tileId),
                MapRenderer::isTileA2(tileId), MapRenderer::isTileA3(tileId), MapRenderer::isTileA4(tileId),
                MapRenderer::isTileA5(tileId));
          }
        }
        ImGui::EndGroup();
        // ImGui::BeginGroup();
        // {
        //   ImGuiWindow* win = ImGui::GetCurrentWindow();
        //   for (int z = 0; z < 6; ++z) {
        //     int tileId = m_mapRenderer.tileId(m_tileCellX, m_tileCellY, z);
        //     if (MapRenderer::isAutoTile(tileId)) {
        //       auto tileRects = m_mapRenderer.getTileRect(tileId, m_tileCellX, m_tileCellY);
        //
        //       for (auto tile : tileRects) {
        //         Texture tex = m_resourceManager->loadTilesetImage(tileset->tilesetNames[tile.setNum]);
        //         if (tex) {
        //           win->DrawList->AddImage(
        //               tex.get(), win->ContentRegionRect.Min + ImVec2{tile.x * tile.tileWidth, tile.y *
        //               tile.tileHeight}, win->ContentRegionRect.Min + ImVec2{(tile.x * tile.tileWidth) +
        //               tile.tileWidth,
        //                                                   (tile.y * tile.tileHeight) + tile.tileHeight},
        //               {tile.u / tex.width(), tile.v / tex.height()},
        //               {(tile.u + tile.tileWidth) / tex.width(), (tile.v + tile.tileHeight) / tex.height()});
        //         }
        //       }
        //     }
        //   }
        // }
        // ImGui::EndGroup();
      }
    }
    ImGui::End();
  }

#endif